// Code generated by mockery v2.20.0. DO NOT EDIT.

package mocks

import (
	domain "company-micro/domain"
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// CompanyRepository is an autogenerated mock type for the CompanyRepository type
type CompanyRepository struct {
	mock.Mock
}

// Create provides a mock function with given fields: c, company
func (_m *CompanyRepository) Create(c context.Context, company *domain.Company) error {
	ret := _m.Called(c, company)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domain.Company) error); ok {
		r0 = rf(c, company)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteByName provides a mock function with given fields: c, name
func (_m *CompanyRepository) DeleteByName(c context.Context, name string) (int64, error) {
	ret := _m.Called(c, name)

	var r0 int64
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (int64, error)); ok {
		return rf(c, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) int64); ok {
		r0 = rf(c, name)
	} else {
		r0 = ret.Get(0).(int64)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByName provides a mock function with given fields: c, name
func (_m *CompanyRepository) FindByName(c context.Context, name string) (domain.Company, error) {
	ret := _m.Called(c, name)

	var r0 domain.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Company, error)); ok {
		return rf(c, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Company); ok {
		r0 = rf(c, name)
	} else {
		r0 = ret.Get(0).(domain.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, name)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindByUUID provides a mock function with given fields: c, companyUUID
func (_m *CompanyRepository) FindByUUID(c context.Context, companyUUID string) (domain.Company, error) {
	ret := _m.Called(c, companyUUID)

	var r0 domain.Company
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (domain.Company, error)); ok {
		return rf(c, companyUUID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) domain.Company); ok {
		r0 = rf(c, companyUUID)
	} else {
		r0 = ret.Get(0).(domain.Company)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(c, companyUUID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

type mockConstructorTestingTNewCompanyRepository interface {
	mock.TestingT
	Cleanup(func())
}

// NewCompanyRepository creates a new instance of CompanyRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewCompanyRepository(t mockConstructorTestingTNewCompanyRepository) *CompanyRepository {
	mock := &CompanyRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
